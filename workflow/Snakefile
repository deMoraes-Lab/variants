configfile: "config/config.yaml"


# RefSeq ID of reference genome
ID = config["reference_id"]
DIR = config["target_dir"]

assert ID is not None, "Please provide a NCBI accession for reference genome"
assert DIR is not None, "Please provide a directory of fastq files"

RESULTS_DIR = config["out_results"]
RESULTS_DIR_ALIGN = config["out_alignments"]
RESULTS_DIR_REFERENCE = config["out_reference"]


def to_list(file):
    return [line.strip() for line in open(file).readlines()]


FILE_NAMES = config["names"]
FILE_FORWARDS = config["forwards"]
FILE_REVERSES = config["reverses"]


NAMES = to_list(FILE_NAMES)
FORWARDS = to_list(FILE_FORWARDS)
REVERSES = to_list(FILE_REVERSES)

assert (
    len(NAMES) == len(FORWARDS) == len(REVERSES)
), f"Different number of target fastq files and their associated names, check the following files:\n {FILE_NAMES}, {FILE_FORWARDS}, {FILE_REVERSES}"


BOWTIE2_THREADS = config["bowtie2_threads"]

PVAL = config["variants_pval"]
FREQ = config["variants_freq"]


ALL = expand("{results}/{names}.variants.tsv", results=RESULTS_DIR, names=NAMES)


rule all:
    input:
        ALL,


rule download_reference:
    output:
        zip=f"{RESULTS_DIR_REFERENCE}/{ID}.zip",
    conda:
        "envs/ncbi_datasets.yaml"
    shell:
        """
        datasets download genome accession {ID} --filename {output.zip} --include genome
        """


rule unzip_reference:
    input:
        zip=rules.download_reference.output.zip,
    output:
        fna=f"{RESULTS_DIR_REFERENCE}/{ID}.fna",
    shell:
        """
        unzip -o {input} -d {RESULTS_DIR_REFERENCE}

        # Flatten ncbi dir structure
        mv {RESULTS_DIR_REFERENCE}/ncbi_dataset/data/{ID}/* \
           {RESULTS_DIR_REFERENCE}

        # Rename fna
        mv {RESULTS_DIR_REFERENCE}/*.fna {output}

        # Remove crust
        rm -r {RESULTS_DIR_REFERENCE}/ncbi_dataset/ \
              {RESULTS_DIR_REFERENCE}/README.md
        """


rule index_reference:
    input:
        fna=rules.unzip_reference.output.fna,
    output:
        indexes=multiext(
            f"{RESULTS_DIR_REFERENCE}/{ID}",
            ".1.bt2",
            ".2.bt2",
            ".3.bt2",
            ".4.bt2",
            ".rev.1.bt2",
            ".rev.2.bt2",
        ),
    params:
        indexes_basename=f"{RESULTS_DIR_REFERENCE}/{ID}",
    threads: BOWTIE2_THREADS
    conda:
        "envs/bowtie2.yaml"
    shell:
        """
        bowtie2-build --threads {threads} {input.fna} {params.indexes_basename}
        """


rule align:
    input:
        fq_forward=lambda w: FORWARDS[NAMES.index(w.name)],
        fq_reverse=lambda w: REVERSES[NAMES.index(w.name)],
        indexes=rules.index_reference.output.indexes,
    output:
        sam=f"{RESULTS_DIR_ALIGN}/{{name}}.sam",
    params:
        indexes_basename=f"{RESULTS_DIR_REFERENCE}/{ID}",
    threads: BOWTIE2_THREADS
    conda:
        "envs/bowtie2.yaml"
    shell:
        """
        bowtie2 -p {threads} -x {params.indexes_basename} -1 {input.fq_forward} -2 {input.fq_reverse} -S {output.sam}
        """


rule get_bam:
    input:
        sam=rules.align.output.sam,
    output:
        bam=f"{RESULTS_DIR_ALIGN}/{{name}}.bam",
    conda:
        "envs/samtools.yaml"
    shell:
        """
        samtools view -S -b {input.sam} >| {output.bam}
        """


rule sort_bam:
    input:
        bam=rules.get_bam.output.bam,
    output:
        sbam=f"{RESULTS_DIR_ALIGN}/{{name}}.sorted.bam",
    conda:
        "envs/samtools.yaml"
    shell:
        """
        samtools sort {input.bam} -o {output.sbam}
        """


rule index_bam:
    input:
        sbam=rules.sort_bam.output.sbam,
    output:
        bai=f"{RESULTS_DIR_ALIGN}/{{name}}.sorted.bam.bai",
    conda:
        "envs/samtools.yaml"
    shell:
        """
        samtools index {input.sbam} -o {output.bai}
        """


rule get_mpileup:
    input:
        fna=rules.unzip_reference.output.fna,
        sbam=rules.sort_bam.output.sbam,
    output:
        mpileup=f"{RESULTS_DIR_ALIGN}/{{name}}.mpileup",
    conda:
        "envs/samtools.yaml"
    shell:
        """
        samtools mpileup -f {input.fna} {input.sbam} -o {output.mpileup}
        """


rule call_variants:
    input:
        mpileup=rules.get_mpileup.output.mpileup,
    output:
        tsv=f"{RESULTS_DIR}/{{name}}.variants.tsv",
    params:
        pval=PVAL,
        freq=FREQ,
    conda:
        "envs/varscan.yaml"
    shell:
        """
        varscan pileup2snp {input.mpileup} --min-var-freq {params.freq} --p-value {params.pval} >| {output.tsv}
        """
