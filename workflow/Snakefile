configfile: "config/config.yaml"


# RefSeq ID of reference genome
ID = config["reference_genome_id"]


RESULTS_DIR = config["results"]["dir"]
RESULTS_DIR_ALIGN = config["results"]["alignments"]
RESULTS_DIR_REFERENCE = config["results"]["reference"]


def to_list(file):
    return [line.strip() for line in open(file).readlines()]


NAMES = to_list(config["names_list"])
FORWARDS = to_list(config["fqs"]["forward_list"])
REVERSES = to_list(config["fqs"]["reverse_list"])

BOWTIE2_THREADS = config["bowtie2_threads"]


ALL = expand("{results}/{names}.variants.tsv", results=RESULTS_DIR, names=NAMES)


rule all:
    input:
        ALL,


rule download_reference:
    output:
        zip=f"{RESULTS_DIR_REFERENCE}/{ID}.zip",
    shell:
        """
        datasets download genome accession {ID} --filename {output} --include genome
        """


rule unzip_reference:
    input:
        zip=rules.download_reference.output.zip,
    output:
        fna=f"{RESULTS_DIR_REFERENCE}/{ID}.fna",
    shell:
        """
        unzip -o {input} -d {RESULTS_DIR_REFERENCE}

        # Flatten ncbi dir structure
        mv {RESULTS_DIR_REFERENCE}/ncbi_dataset/data/{ID}/* \
           {RESULTS_DIR_REFERENCE}

        # Rename fna
        mv {RESULTS_DIR_REFERENCE}/*.fna {output}

        # Remove crust
        rm -r {RESULTS_DIR_REFERENCE}/ncbi_dataset/ \
              {RESULTS_DIR_REFERENCE}/README.md
        """


rule index_reference:
    input:
        fna=rules.unzip_reference.output.fna,
    output:
        indexes=multiext(
            f"{RESULTS_DIR_REFERENCE}/{ID}",
            ".1.bt2",
            ".2.bt2",
            ".3.bt2",
            ".4.bt2",
            ".rev.1.bt2",
            ".rev.2.bt2",
        ),
    params:
        indexes_basename=f"{RESULTS_DIR_REFERENCE}/{ID}",
    threads: BOWTIE2_THREADS
    shell:
        """
        bowtie2-build --threads {threads} {input.fna} {params.indexes_basename}
        """


rule align:
    input:
        fq_forward=lambda w: FORWARDS[NAMES.index(w.name)],
        fq_reverse=lambda w: REVERSES[NAMES.index(w.name)],
        indexes=rules.index_reference.output.indexes,
    output:
        sam=f"{RESULTS_DIR_ALIGN}/{{name}}.sam",
    params:
        indexes_basename=f"{RESULTS_DIR_REFERENCE}/{ID}",
    threads: BOWTIE2_THREADS
    shell:
        """
        bowtie2 -p {threads} -x {params.indexes_basename} -1 {input.fq_forward} -2 {input.fq_reverse} -S {output.sam}
        """


rule get_bam:
    input:
        sam=rules.align.output.sam,
    output:
        bam=f"{RESULTS_DIR_ALIGN}/{{name}}.bam",
    shell:
        """
        samtools view -S -b {input.sam} >| {output.bam}
        """


rule sort_bam:
    input:
        bam=rules.get_bam.output.bam,
    output:
        sbam=f"{RESULTS_DIR_ALIGN}/{{name}}.sorted.bam",
    shell:
        """
        samtools sort {input.bam} -o {output.sbam}
        """


rule index_bam:
    input:
        sbam=rules.sort_bam.output.sbam,
    output:
        bai=f"{RESULTS_DIR_ALIGN}/{{name}}.sorted.bam.bai",
    shell:
        """
        samtools index {input.sbam} -o {output.bai}
        """


rule get_mpileup:
    input:
        fna=rules.unzip_reference.output.fna,
        sbam=rules.sort_bam.output.sbam,
    output:
        mpileup=f"{RESULTS_DIR_ALIGN}/{{name}}.mpileup",
    shell:
        """
        samtools mpileup -f {input.fna} {input.sbam} -o {output.mpileup}
        """


rule call_variants:
    input:
        mpileup=rules.get_mpileup.output.mpileup,
    output:
        tsv=f"{RESULTS_DIR}/{{name}}.variants.tsv",
    params:
        freq="0.1",
        pval="0.01",
    shell:
        """
        varscan pileup2snp {input.mpileup} --min-var-freq {params.freq} --p-value {params.pval} >| {output.tsv}
        """
